#!/usr/bin/env python3

"""
Copyright (c) 2014, Cybernetica AS, STACC
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""

import collections

from . import block

class ProtocolResult(collections.namedtuple("ProtocolResult", "output send simulation")):
    __slots__ = ()
    """Contains the results of simulating a protocol.

    Attributes:
        output: The output generated by the simulation.
        send: The messages sent by the simulation.
        simulation: A protocol-specific strucuture containing information
            needed to trace the simulation (intermediate results, generated
            random values etc).

    """

class Protocol(block.Block):

    """A SMC protocol block which extends block.Block by adding communication
    with other nodes.

    This is an abstract base class and the actual protocol is specified by
    inheriting classes.

    Attributes:
        send: Messages sent to other nodes. A map from the node's identifier to
            a list of messages sent to that node.
        recv: Messages received from another node. A map from the node's
            identifier to a list of messages received from that node.

    """

    def __init__(self, input, output, send, recv, context=None):
        """Instantiate a new SMC protocol block with the given attributes."""
        super().__init__(input, output, context) # also sets self._cached = None
        self.send = send
        self.recv = recv

    def _simulate(self):
        """Simulate the protocol with the input attributes.

        Returns:
            A ProtocolResult with the output produced and messages sent by
            executing the protocol.

        """
        raise NotImplementedError

    def verify(self):
        """Verify the attributes.

        Check if a simulation of this protocol with the input attributes returns
        a result equal to *output* and sends messages equal to *send*.

        Returns:
            True if the simulated output and messages are equal to the expected
            output and messages.

        """
        return self.result.output == self.output and self.result.send == self.send
